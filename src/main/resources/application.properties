spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.defer-datasource-initialization=true
spring.h2.console.enabled=true
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
cors.allowed.origins=${CORS_ORIGINS:https://symphonious-monstera-982c83.netlify.app/}

# # Production database (H2 for simplicity, you can upgrade to PostgreSQL later)
# spring.datasource.url=jdbc:h2:mem:testdb
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=password

# # JPA Configuration
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# spring.jpa.hibernate.ddl-auto=create-drop
# spring.jpa.show-sql=false

# # Server Configuration
# server.port=${PORT:8080}

# # CORS Configuration for production
# cors.allowed.origins=${CORS_ORIGINS:http://localhost:3001}







# spring.application.name=socials
# spring.datasource.driver-class-name = org.postgresql.Driver
# spring.datasource.url = jdbc:postgresql://localhost:5432/social_app_db
# spring.datasource.username = postgres
# spring.datasource.password = Sharan@06
# spring.jpa.hibernate.ddl-auto = update
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# spring.datasource.url=jdbc:h2:mem:testdb
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=password

# # JPA/Hibernate Configuration
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# spring.jpa.hibernate.ddl-auto=create-drop
# spring.jpa.show-sql=true

# # H2 Console (for debugging - you can view your database at http://localhost:8080/h2-console)
# spring.h2.console.enabled=true

# # Server Configuration
# server.port=8080